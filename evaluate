// Functions to evaluate input expression

public static int evaluateExpression(String expression) {
		Stack<Integer> operandStack = new Stack<>();
		Stack<Character> operatorStack = new Stack<>();
		
		// If expression begins with a negative
		if (expression.charAt(0) == '-') {
			expression = "0+0-" + expression;
		}
		
		expression = insertBlanks(expression);
		String[] tokens = expression.split(" ");
		
		// Scan tokens and put numbers in
		for (String token : tokens) {
			//Blank space
			if (token.length() == 0) {
				continue;
			}
			
			// Add numbers to operand stack
			if (token.charAt(0) != '+' && token.charAt(0) != '-' && token.charAt(0) != '*' &&
					token.charAt(0) != '/' && token.charAt(0) != '(' && token.charAt(0) != ')') {
				operandStack.push(Integer.parseInt(token));
			}
		}
		
		//Scan tokens for operators
		for (String token : tokens) {
			// Blank space
			if (token.length() == 0) {
				continue;
			}
			
			else if (token.charAt(0) == '+' || token.charAt(0) == '-') {
				while (!operatorStack.isEmpty() && (operatorStack.peek() == '+' || operatorStack.peek() == '-' ||
						operatorStack.peek() == '*' || operatorStack.peek() == '/')) {
					processOperator(operandStack, operatorStack);
				}
				operatorStack.push(token.charAt(0));
			}
			
			else if (token.charAt(0) == '*' || token.charAt(0) == '/') {
				while (!operatorStack.isEmpty() && (operatorStack.peek() == '*' || operatorStack.peek() == '/')) {
					processOperator(operandStack, operatorStack);
				}
				operatorStack.push(token.charAt(0));
			}
			
			else if (token.trim().charAt(0) == '(') {
				operatorStack.push('(');
			}
			
			else if (token.trim().charAt(0) == ')') {
				while (operatorStack.peek() != '(') {
					processOperator(operandStack, operatorStack);
				}
				operatorStack.pop();
			}
		}
		
		// Process remaining operators in the stack
		while (!operatorStack.isEmpty()) {
			processOperator(operandStack, operatorStack);
		}
		
		return operandStack.pop();
	}
	
	public static void processOperator(Stack<Integer> operandStack, Stack<Character> operatorStack) {
		char op = operatorStack.pop();
		int op1 = operandStack.pop();
		int op2 = operandStack.pop();
		
		if (op == '+') {
			operandStack.push(op2 + op1);
		}
		
		else if (op == '-') {
			operandStack.push(op2 - op1);
		}
		
		else if (op == '*') {
			operandStack.push(op2 * op1);
		}
		
		else if (op == '/') {
			operandStack.push(op2 / op1);
		}
	}
	
	public static String insertBlanks(String s) {
		String result = "";
		
		for (int i = 0; i < s.length(); i++) {
			if (s.charAt(i) == '(' || s.charAt(i) == ')' || s.charAt(i) == '+' ||
					s.charAt(i) == '-' || s.charAt(i) == '*' || s.charAt(i) == '/') {
				result += " " + s.charAt(i) + " ";
			}
			else {
				result += s.charAt(i);
			}
		}
		
		return result;
	}
